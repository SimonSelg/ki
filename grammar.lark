// A ``file`` is a sequence of 0 or more ``note`` rules.
file: "\n"* note*

// A ``note`` is a group of exactly 1 ``header`` and at least 1 ``field``.
note: header field+

// Only allow one newline after a field, but it can have many newlines within
// it, and fields can be empty.
field: fieldheader FIELDLINE*
fieldheader: FIELDSENTINEL " "* ANKINAME "\n"+

// A ``header`` is sequence of metadata rules, all required.
header: (title NID MODEL deck tags MARKDOWN)

// A ``tags`` object is allowed to be empty.
// We do NOT check that tags do not contain whitespace, because this is difficult.
tags: ("tags:" [TAGNAME ("," TAGNAME)*]) "\n"+

// Titles are alphameric + some limited punctuation, and must start with a
// nonspace char. Exactly 1 space between #s and start-of-title.
title: "##" TITLENAME "\n"+

// Anki allows empty deck component names, but we do not, because that is insane.
deck: "deck:" DECKNAME "\n"

// NID field is allowed to be empty.
NID: "nid:" " "* INT? "\n"+
MODEL: "model:" " "* ANKINAME "\n"+
DECKSENTINEL: "deck:"
FIELDSENTINEL: "###"
MARKDOWN: "markdown:" " "* ("true" | "false") "\n"+
FIELDLINE: /(?!##)(?:[^\0\x07\x08\x0b\x0c\r\n])+/ "\n"+
DECKNAME: DECKCOMPONENTNAME (DECKDELIMITER DECKCOMPONENTNAME)*
DECKDELIMITER: "::"

// Anki strips leading and trailing spaces from field names (you can test this
// in the desktop client).
ANKINAME: STARTENDCHAR ANKICHAR* (/[\t ]/+ ANKICHAR+)*
TAGNAME: /[^\s\0\x07\x08\x0b\x0c",]/+
// DECKCOMPONENTNAME: /[^\0\x07\x08\x0b\x0c"\r\n]/+
DECKCOMPONENTNAME: DECKNONSPACECHAR DECKCHAR*
DECKCHAR: /[^\0\x07\x08\x0b\x0c"\r\n]/
DECKNONSPACECHAR: /[^\0\x07\x08\x0b\x0c"\s]/
STARTENDCHAR: /[^#^\/\s:{}"\0\x07\x08]/
ANKICHAR: /[^\s:{}"\0\x07\x08]/
TITLENAME: VARIABLECHAR (" " | VARIABLECHAR)*
VARIABLECHAR: /[a-zA-Z0-9_-]/

%import common.ESCAPED_STRING
%import common.INT
%import common.WS_INLINE
%ignore WS_INLINE
